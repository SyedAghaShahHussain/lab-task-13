Lab Tasks Solutions
Task #1: Quick Sort (Descending Order)
#include <iostream>
#include <vector>
using namespace std;
void quickSort(vector<int>& arr, int start, int end);
int partition(vector<int>& arr, int start, int end);
void quickSort(vector<int>& arr, int start, int end) {
 if (start < end) {
 int pivotIndex = partition(arr, start, end);
 quickSort(arr, start, pivotIndex - 1);
 quickSort(arr, pivotIndex + 1, end);
 }
}
int partition(vector<int>& arr, int start, int end) {
 int pivot = arr[start];
 int low = start + 1;
 int high = end;
 while (true) {
 while (low <= high && arr[high] <= pivot)
 high--;
 while (low <= high && arr[low] > pivot)
 low++;
 if (low <= high) {
 swap(arr[low], arr[high]);
 } else {
 break;
 }
 }
 swap(arr[start], arr[high]);
 return high;
}
int main() {
 vector<int> arr = {35, 12, 43, 8, 51, 24, 67};
 quickSort(arr, 0, arr.size() - 1);

 cout << "Sorted Array (Descending): ";
 for (int num : arr) {
 cout << num << " ";
 }
 return 0;
}
Task #2: Selection Sort (Descending Order)
#include <iostream>
#include <vector>
using namespace std;
void selectionSort(vector<int>& arr) {
 int n = arr.size();
 for (int i = 0; i < n - 1; i++) {
 int maxIdx = i;
 for (int j = i + 1; j < n; j++) {
 if (arr[j] > arr[maxIdx]) {
 maxIdx = j;
 }
 }
 swap(arr[i], arr[maxIdx]);

 // Display the array after each iteration
 cout << "Iteration " << i + 1 << ": ";
 for (int num : arr) {
 cout << num << " ";
 }
 cout << endl;
 }
}
int main() {
 vector<int> arr = {7, 2, 9, 4, 1};
 selectionSort(arr);
 cout << "Sorted Array (Descending): ";
 for (int num : arr) {
 cout << num << " ";
 }
 return 0;
}
